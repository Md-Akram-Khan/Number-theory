#include <bits/stdc++.h>
using namespace std;
void sieve(int limit, vector<int> &prime)
{
	vector<bool> mark(limit + 1, 1);
	for (int p = 2; p * p < limit; p++)
	{
		if (mark[p] == 1)
			for (int i= p * p; i < limit; i += p)
				mark[i] = 0;
	}
	for (int p = 2; p < limit; p++)
	{
		if (mark[p] == true)
		{
			prime.push_back(p);
			cout<<p<<" ";
		}
	}
}
void segmentedsieve(int n)
{
	int limit = floor(sqrt(n))+1;
	vector<int> prime;
	prime.reserve(limit);
	sieve(limit, prime);
	int low = limit;
	int high = 2 * limit;
	while (low < n)
	{
		if (high >= n)
		high = n;
		bool mark[limit+1];
		memset(mark, 1, sizeof(mark));
		for (int i = 0; i < prime.size(); i++)
		{
			int loLim = floor(low/prime[i]) * prime[i];
			if (loLim < low)
				loLim += prime[i];
			for (int j=loLim; j < high; j += prime[i])
				mark[j-low] = 0;
		}
		for (int i = low; i < high; i++)
			if (mark[i - low] == 1)
				cout << i << " ";
		low = low + limit;
		high = high + limit;
	}
}
int main()
{
	int n = 100;
	cout << "Primes smaller than " << n << ":\n";
	segmentedsieve(n);
	return 0;
}
