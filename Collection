4 MB ~ array of size 10^6 . Or 2-d array of size 10^3*10^3

unsigned int (4*10^9).

Introduction to Algorithms by Thomas H. Cormen book.

Read about the algorithms from Introduction to Algorithms and also videos by Tushar Roy are very useful for learning algorithms used in competitive coding.

edges[x].push_back(y);
size=edges[1].size();
for(int i=0; i < size ; i++)
printf("%d ",edges[1][i]);

#define valid(nx,ny) nx>=1 && nx<=row && ny>=1 && ny<=col

checking substring:
sting x, y;
if(x.find(y)<=x.size()) yes y is a substring of x;
else no;

finding maximum values from many elements
vector<char> M {A[i][j], A[n - 1 - j][i], A[n - 1 - i][n - 1 - j], A[j][n - 1 - i]};
char c = *max_element(all(M));

taking input of an vector
vector<int> a(5);
for(auto &i: a) cin>>i;
or,
for(int &x: a) cin >> x;

//this needs much time as it is always copies the dp container
int check(int n, int m, vector<int> dp)
{
    if(m > n) return n+1;
    else if(m == n) return 0;
    else return dp[m];
}
void solve()
{
    
    for(int i = n-2; i>=0; i--)
    {
        dp[i] = min(dp[i+1] + 1, check(n, i + a[i] + 1, dp));
    }
}

without using function we can write the code :
void solve()
{
    auto check = [&](int m)
    {
        if(m > n) return n + 1;
        if(m == n) return 0;
        return dp[m];
    };
    for(int i = n-2; i>=0; i--)
    {
        dp[i] = min(dp[i+1] + 1, check(i + a[i] + 1));
    }
    cout<<dp[0]<<nl;
}

if inner function return nothing :
main()
{
	auto process_gap = [&](int g) -> void{
		if(g <= 1){
			ans += g;
		}
		else if(g % 2 == 1){
			odd_g.push_back(g / 2);
		}
		else{
			triangles_from_even_g += g / 2;
		}
	};
	for(int i = 0; i < x - 1; i++){
		process_gap(chosen[i + 1] - chosen[i] - 1);
	}
}

We have some numbers and their gcd.if we add some number with previous it may remain the gcd same or higher than before
we have some numbers and their AND.if we add some number with previous it may remain the AND same or lower than before

left-down -> right-up diagonal sum collection for n*n matrix 
d1[row + col]
left-up -> right-down diagonal sum collection for n*n matrix
d2[row - col + n]
two bishops of chess targeted cell will not cross if one is located at even i + j position and other is located at odd i + j

//conditional sorting:
struct student
{
    ll k;
    ll s;
    ll back_time;
 
    bool operator<(const student& other_student) const
    {
        if(k == other_student.k)
        {
            if(back_time == other_student.back_time)
            {
                return s > other_student.s;
            }
            return back_time > other_student.back_time;
        }
        return k < other_student.k;
    }
};
//priority_queue<struct student> queue2;//
struct sorting
{
    int point;
    string user;
    bool operator<(const sorting& another_user) const
    {
        if(point == another_user.point)
        {
            for(int i = 0; i < min(user.size(), another_user.user.size()); i++)
            {
                if(user[i] == another_user.user[i])
                    continue;
                return user[i] > another_user.user[i];
            }
            return user.size() > another_user.user.size();
        }
        return point < another_user.point;
    }
};
//priority_queue<struct sorting> q;//

GCD(a1,a2,a3,…,an)=GCD(a1,a1+a2,a1+a2+a3,…,a1+a2+a3+…an)
n * 2 == n<<1
n / 2 == n>>1
n % m == n & (m-1)
