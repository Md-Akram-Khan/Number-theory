#include <bits/stdc++.h>
using namespace std;

// Extended Euclidean Algorithm
int extended_gcd(int a, int b, int &x, int &y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    int x1, y1;
    int g = extended_gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - (a / b) * y1;
    return g;
}

// Modular inverse function
int modInverse(int a, int m) {
    int x, y;
    int g = extended_gcd(a, m, x, y);
    if (g != 1) {
        // Inverse doesn't exist if a and m are not coprime
        cout << "Inverse doesn't exist\n";
        return -1;
    } else {
        // Make x positive
        return (x % m + m) % m;
    }
}

int main() {
    int a, m;
    cout << "Enter a and m: ";
    cin >> a >> m;

    int inv = modInverse(a, m);
    if (inv != -1)
        cout << "Modular Inverse of " << a << " mod " << m << " is " << inv << "\n";

    return 0;
}
